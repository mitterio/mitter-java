package io.mitter.data.domain.federation;

import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.mitter.data.domain.annotations.Identifiable;
import io.mitter.data.domain.annotations.IdentifiableEntity;
import io.mitter.data.domain.annotations.Identifier;
import io.mitter.data.domain.application.Application;
import io.mitter.data.domain.federation.services.GoogleFederatedUser;
import io.mitter.data.domain.user.User;
import io.mitter.data.domain.user.locators.UserLocator;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.Collections;
import java.util.List;

/**
 * Represents a federated user. A federated user is an entity that is identified as a user on an external service. This
 * class (or rather the implementations of the same) act merely as a reference to these entities on the external service.
 *
 * @author Rohan Prabhu (rohan@mitter.io)
 */
@JsonTypeInfo(use= JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.PROPERTY, property="@type")
@JsonSubTypes({
        @JsonSubTypes.Type(value = GoogleFederatedUser.class)
})
public abstract class FederatedUser implements IdentifiableEntity<FederatedUser> {
    /**
     * The federated user id. This id is used for referencing this instance internally, and is generated by the application.
     */
    private String federatedUserId;
    /**
     * A list of user-locators for this federated-user id. These user locators are resolved by specific implementations
     * that query and operate on the particular external service.
     */
    private List<UserLocator> userLocators;
    /**
     * The user that this federated user references. This field is not required to be initialized.
     */
    private User referencedUser;
    private Identifiable<Application> applicationId;
    /**
     * The state of the link between the federated user and the user. When, the state is <code>Unlinked</code>, there must
     * be no user present for this federated user and when <code>Detached</code>, all applications must obey the semantics
     * as if the user is <code>Unlinked</code>.
     */
    private FederatedUserLinkState federatedUserLinkState;

    protected FederatedUser(List<UserLocator> userLocators,
                            String federatedUserId,
                            User referencedUser,
                            Identifiable<Application> applicationId) {
        this();
        this.userLocators = userLocators;
        this.referencedUser = referencedUser;
        this.federatedUserId = federatedUserId;
        this.applicationId = applicationId;
    }

    protected FederatedUser() {
        this.userLocators = Collections.emptyList();
    }

    @Identifier
    public String getFederatedUserId() {
        return this.federatedUserId;
    }

    public List<UserLocator> getUserLocators() {
        return userLocators;
    }

    public abstract FederationCredentials getFederationCredentials();

    public User getReferencedUser() {
        return this.referencedUser;
    }

    public Identifiable<Application> getApplicationId() {
        return applicationId;
    }

    public FederatedUser setFederatedUserId(String federatedUserId) {
        this.federatedUserId = federatedUserId;
        return this;
    }

    public FederatedUser setUserLocators(List<UserLocator> userLocators) {
        this.userLocators = userLocators;
        return this;
    }

    public FederatedUser setReferencedUser(User referencedUser) {
        this.referencedUser = referencedUser;
        return this;
    }

    public FederatedUser setApplicationId(Identifiable<Application> applicationId) {
        this.applicationId = applicationId;
        return this;
    }

    public FederatedUserLinkState getFederatedUserLinkState() {
        return federatedUserLinkState;
    }

    public FederatedUser setFederatedUserLinkState(FederatedUserLinkState federatedUserLinkState) {
        this.federatedUserLinkState = federatedUserLinkState;
        return this;
    }

    @NotNull
    @Override
    public String domainId() {
        return getFederatedUserId();
    }

    @Nullable
    @Override
    public String internalId() {
        return getFederatedUserId();
    }

    @Override
    public String toString() {
        return "FederatedUser{" +
                "federatedUserId='" + federatedUserId + '\'' +
                ", userLocators=" + userLocators +
                ", referencedUser=" + referencedUser +
                ", applicationId=" + applicationId +
                '}';
    }
}
